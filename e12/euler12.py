
# coding: utf-8

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

# In[21]:


# returns all the factors of a number include 1 and itself

def helper(inputVal):
    assert isinstance(inputVal,long) or isinstance(inputVal,int)
    factors = []
    for i in range(0,int(inputVal**.5)+1):
        if inputVal%(i+1) == 0:
            factors.append(i+1)
            factors.append(inputVal/(i+1))
    return factors


# We are not really sure of unique patterns that are related to length of number of factors, so we can only climb up and hope for the best.
# 

# In[22]:

uppLIM = 500
def Euler12(upperLimit):
    i_thNumber = 1
    ithValue = 1
    while len(helper(ithValue))<upperLimit:
        i_thNumber +=1
        ithValue += i_thNumber
#         if i_thNumber == 5000:
#             print ithValue
#             break
    return {"index":i_thNumber, "value":ithValue}

Euler12(uppLIM)


# In[ ]:



