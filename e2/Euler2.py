
# coding: utf-8

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# In[1]:

# Keep track of couple things
# Track the actual fibonacci sequence
# Track Values
def Euler2(inputArr,under):
#     inputArr is the [1,2]
#     under is 4000000
    sumCounter = 0
    evenNumbers = []
    for ele in inputArr:
        assert isinstance(ele,int)
        if ele%2 == 0:
            sumCounter += ele
            evenNumbers.append(ele)
    
    nextToken = 1
    startingArray = inputArr
    while nextToken < under:
        nextToken = startingArray[-2] + startingArray[-1]
        startingArray.append(nextToken)
        if (nextToken%2 == 0 and nextToken < under):
            sumCounter += nextToken
            evenNumbers.append(nextToken)
    return sum(evenNumbers),startingArray
Euler2([1,2],4000000)


# In[ ]:



